from enum import Enum
import typing
from copy import deepcopy
from functools import cached_property

from bs4 import BeautifulSoup
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, \
                           InputMediaPhoto

import utils
from const import *


class TaxonomyElem:
    def __init__(self, emoji: str,
                 title: str,
                 category_url: str | None = None):
        self.emoji = emoji
        self.title = title
        self.category_url = category_url
        self.content = []

    def add_content(self, text: str,
                    url: str | None = None):
        self.content.append({'text': text, 'url': url} if url else text)
        return self

    def __str__(self):
        if self.category_url is None:
            text = f'{self.emoji} **{self.title}:** '
        else:
            text = f'{self.emoji} **[{self.title}]({self.category_url}):** '
        for content_item in self.content:
            if isinstance(content_item, dict):
                text += f'[{content_item["text"]}]({content_item["url"]}), '
            else:
                text += f'{content_item}, '
        return text.removesuffix(', ')


class Quote:
    TYPES = Enum('Quote types', 'quote po pritcha')
    TAXONOMY_TEMPLATES = {
        '–ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã': TaxonomyElem('¬©Ô∏è', '–ê–≤—Ç–æ—Ä', BASE_CATEGORY_URL % 'man'),
        '–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω': TaxonomyElem('¬©Ô∏è', '–ê–≤—Ç–æ—Ä', BASE_CATEGORY_URL % 'man')
            .add_content('–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω', BASE_URL % 'other'),
        '–¶–∏—Ç–∏—Ä—É–µ–º—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂': TaxonomyElem('üí¨', '–¶–∏—Ç–∏—Ä—É–µ–º—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏'),
        '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å': TaxonomyElem('üé§', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏', BASE_CATEGORY_URL % 'music'),
        '–¶–∏—Ç–∞—Ç–∞ –∏–∑ –∫–Ω–∏–≥–∏': TaxonomyElem('üìñ', '–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ', BASE_CATEGORY_URL % 'book'),
        '–¶–∏—Ç–∞—Ç–∞ –∏–∑ —Ñ–∏–ª—å–º–∞': TaxonomyElem('üé¨', '–§–∏–ª—å–º', BASE_CATEGORY_URL % 'movie'),
        '–¶–∏—Ç–∞—Ç–∞ –∏–∑ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞': TaxonomyElem('üß∏', '–ú—É–ª—å—Ç—Ñ–∏–ª—å–º', BASE_CATEGORY_URL % 'cartoon'),
        '–¶–∏—Ç–∞—Ç–∞ –∏–∑ —Å–µ—Ä–∏–∞–ª–∞': TaxonomyElem('üé•', '–°–µ—Ä–∏–∞–ª', BASE_CATEGORY_URL % 'series'),
        '–¶–∏—Ç–∞—Ç–∞ –∏–∑ —Ç–µ–ª–µ—à–æ—É': TaxonomyElem('üì∫', '–¢–µ–ª–µ—à–æ—É', BASE_CATEGORY_URL % 'tv'),
        '–¶–∏—Ç–∞—Ç–∞ –∏–∑ —Å–ø–µ–∫—Ç–∞–∫–ª—è': TaxonomyElem('üé≠', '–°–ø–µ–∫—Ç–∞–∫–ª—å', BASE_CATEGORY_URL % 'theater'),
        '–¶–∏—Ç–∞—Ç–∞ –∏–∑ –∏–≥—Ä—ã': TaxonomyElem('üéÆ', '–ò–≥—Ä–∞', BASE_CATEGORY_URL % 'game'),
        '–¶–∏—Ç–∞—Ç–∞ –∏–∑ –∫–æ–º–∏–∫—Å–∞': TaxonomyElem('ü¶∏üèª\u200d‚ôÇÔ∏è', '–ö–æ–º–∏–∫—Å', BASE_CATEGORY_URL % 'comics'),
        '–¶–∏—Ç–∞—Ç–∞ –∏–∑ –∞–Ω–∏–º–µ': TaxonomyElem('ü•∑üèª', '–ê–Ω–∏–º–µ', BASE_CATEGORY_URL % 'anime'),
        '–ü–µ—Å–Ω—è': TaxonomyElem('üéµ', '–ü–µ—Å–Ω—è', BASE_CATEGORY_URL % 'music'),
        '–°–∞–º–∏–∑–¥–∞—Ç': TaxonomyElem('‚úçüèª', '–°–∞–º–∏–∑–¥–∞—Ç', BASE_CATEGORY_URL % 'self'),
        '–ü—Ä–∏—Ç—á–∞': TaxonomyElem('‚òØ', '–ü—Ä–∏—Ç—á–∞', BASE_URL % 'pritchi'),
        '–§–æ–ª—å–∫–ª–æ—Ä': TaxonomyElem('üìú', '–§–æ–ª—å–∫–ª–æ—Ä', BASE_URL % 'po'),
        '–†–µ–π—Ç–∏–Ω–≥': TaxonomyElem('‚≠ê', '–†–µ–π—Ç–∏–Ω–≥'),
        '–≠–ø–∏–∑–æ–¥': TaxonomyElem('üìÄ', '–≠–ø–∏–∑–æ–¥')
    }

    def __init__(self, html_page: str):
        self._soup = BeautifulSoup(html_page, 'lxml')
        self._quote_tag = self._soup.article
        self._content_tag, self._rating_tag, _ = self._quote_tag.findChildren(recursive=False)
        self._main_body_tag = self._content_tag.findChildren(recursive=False)[0].extract()
        self.id, self.header                # –≤—ã–∑—ã–≤–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç
        del self._soup, self._quote_tag     # –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ —Ç–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É–¥–∞–ª—è–µ–º

    @cached_property
    def id(self) -> str:
        return self._quote_tag['id'].removeprefix('node-')

    @cached_property
    def header(self) -> str | None:
        if self.type is Quote.TYPES.pritcha:
            header_tag = self._soup.h1
            if header_tag is None:                           # —É —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–∏—Ç–∞—Ç —Ö–µ–¥–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ–≥–µ,
                header_tag = self._content_tag.extract().h2  # –æ—Ç–ª–∏—á–Ω–æ–º –æ—Ç –æ–±—ã—á–Ω—ã—Ö —Ü–∏—Ç–∞—Ç
            return header_tag.text

    @cached_property
    def type(self) -> Enum:
        if 'node-po' in self._quote_tag['class']:
            type = Quote.TYPES.po
        elif 'node-pritcha' in self._quote_tag['class']:
            type = Quote.TYPES.pritcha
        else:
            type = Quote.TYPES.quote
        return type

    @cached_property
    def url(self) -> str:
        match self.type:
            case Quote.TYPES.quote:
                url = QUOTE_URL
            case Quote.TYPES.pritcha:
                url = PRITCHA_URL
            case Quote.TYPES.po:
                url = PO_URL
        return url % self.id

    @property
    def text(self) -> str | typing.Tuple[str]:
        match self._main_body_tag.findChildren(recursive=False):
            case original_tag, translated_tag:
                return original_tag.text.strip(), translated_tag.text.strip()
            case (text_tag,):
                return text_tag.text.strip()

    @property
    def _rating(self) -> TaxonomyElem | None:
        rating_tag = self._rating_tag.find(
            'div', class_='rate-widget-rating__inner')
        sum, neg, pos = rating_tag.findChildren(recursive=False)
        sum, neg, pos = sum.text.strip(), neg.text, pos.text
        if (sum, neg, pos) != ('0', '0', '0'):
            rating_taxonomy = deepcopy(Quote.TAXONOMY_TEMPLATES['–†–µ–π—Ç–∏–Ω–≥'])
            if neg == '0':
                rating_taxonomy.add_content(sum)
            elif pos == '0':
                rating_taxonomy.add_content(f'-{sum}')
            else:
                rating_taxonomy.add_content(f'{pos} - {neg} = {sum}')
            return rating_taxonomy

    @property
    def _series(self) -> TaxonomyElem | None:
        if self.type is Quote.TYPES.quote:
            series_tag = self._content_tag.find(
                'div', class_='node__series', recursive=False)
            if series_tag is not None:
                taxonomy_elem = deepcopy(Quote.TAXONOMY_TEMPLATES['–≠–ø–∏–∑–æ–¥'])
                for serie_tag in series_tag.find_all('div', class_='field-item'):
                    if link_tag := serie_tag.find('a'):
                        taxonomy_elem.add_content(link_tag.text, link_tag['href'])
                    else:
                        taxonomy_elem.add_content(serie_tag.text.strip())
                return taxonomy_elem

    @property
    def taxonomy(self) -> typing.Generator[TaxonomyElem, None, None]:
        if self.type is Quote.TYPES.pritcha:
            yield deepcopy(Quote.TAXONOMY_TEMPLATES['–ü—Ä–∏—Ç—á–∞']).add_content(self.header)
        else:
            taxonomy_tags = self._content_tag.find_all(
                'div', class_='field-type-taxonomy-term-reference',
                recursive=False)
            for tag in taxonomy_tags:
                key = tag.a.get('title', '–§–æ–ª—å–∫–ª–æ—Ä')  # —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å–ª–æ–≤–∏—Ü—ã –Ω–µ –∏–º–µ—é—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ title
                taxonomy_elem = deepcopy(Quote.TAXONOMY_TEMPLATES[key])
                if key != '–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω':
                    for link_tag in tag.find_all('a'):
                        taxonomy_elem.add_content(link_tag.text, link_tag['href'])
                yield taxonomy_elem
            if series := self._series:
                yield series
        if rating := self._rating:
            yield rating

    @property
    def topics(self) -> typing.Generator[dict, None, None]:
        topics = []
        topics_tag = self._content_tag.find('div', class_='node__topics')
        if topics_tag is not None:
            topics.extend(topics_tag.find_all('a'))       # –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã, –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–æ–¥ —Ü–∏—Ç–∞—Ç–æ–π
        topics.extend(self._main_body_tag.find_all('a'))  # —Ç–µ–º—ã, –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
        for num, topic in enumerate(topics):
            topic = {'text': topic.text.lower().replace(', ', ' #'),
                     'url': topic['href']}  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–≥–∏ –≤ —É–¥–æ–±–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä–∏
            if topic['url'] not in topics:  # –∏ –æ—Ç—Å–µ–∏–≤–∞–µ–º, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ —Å—Å—ã–ª–∫–∏ (–Ω–µ —Ç–µ–∫—Å—Ç,
                yield topic
            topics[num] = topic['url']      # —Ç. –∫. –æ–Ω –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è) —É–∂–µ –µ—Å—Ç—å

    @cached_property
    def images(self) -> typing.List[InputMediaPhoto] | None:
        images = []
        for img_tag in self._content_tag.find_all('img'):
            images.append(InputMediaPhoto(img_tag['src']))
        if images:
            return images

    @property
    def has_original(self) -> bool:
        return bool(
            self._content_tag.find('div', class_='quote__original')
        )

    @cached_property
    def explanation(self) -> str | None:
        explanation_tag = self._content_tag.find(
            'div', class_='field-name-field-description', recursive=False)
        if explanation_tag is not None:
            return utils.normalize(
                explanation_tag.text.strip().splitlines()[-1]
            )  # –æ—Ç—Å–µ–∫–∞–µ–º –Ω–∞–¥–ø–∏—Å—å ¬´–ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ —Ü–∏—Ç–∞—Ç–µ¬ª

    @cached_property
    def __string_representation(self) -> str:
        if isinstance(text := self.text, tuple):
            text = f'**–û—Ä–∏–≥–∏–Ω–∞–ª:**\n{text[0]}\n\n**–ü–µ—Ä–µ–≤–æ–¥:**\n{text[1]}'
        if self.type is Quote.TYPES.pritcha:
            text = f'**{self.header}**\n{text}'
        text += '\n\n'
        for taxonomy_elem in self.taxonomy:
            text += f'{taxonomy_elem}\n'
        text += '\n'
        for topic in self.topics:
            text += f'[#{topic["text"]}]({topic["url"]}) '
        return utils.normalize(text)

    def __str__(self):
        return self.__string_representation

    @cached_property
    def keyboard(self) -> InlineKeyboardMarkup | None:
        first_row = []
        if explanation := self.explanation:
            if explanation.__sizeof__() > 128:
                explanation = f'e{self.type.name}/{self.id}'
            first_row.append(InlineKeyboardButton('üîÆ –ü–æ—è—Å–Ω–µ–Ω–∏–µ', explanation))
        if self.has_original:
            first_row.append(InlineKeyboardButton('üá¨üáß –û—Ä–∏–≥–∏–Ω–∞–ª', f'o{self.id}'))
        return InlineKeyboardMarkup([
            first_row,
            [InlineKeyboardButton('üîó –û—Ç–∫—Ä—ã—Ç—å', url=self.url)]
        ])
