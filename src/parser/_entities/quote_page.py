import json
import functools

from selectolax.lexbor import LexborHTMLParser

from .. import const, utils
from .quote import Quote
from .taxonomy_elem import TaxonomyElem


class QuotePage:
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏.
    """
    with open('src/parser/data/taxonomy_templates_by_links.json', encoding=const.STR_ENCODING) as f:
        raw_taxonomy_templates: list = json.load(f)
    TAXONOMY_TEMPLATES = {}
    for template in raw_taxonomy_templates:
        TAXONOMY_TEMPLATES[template['rel_link']] = TaxonomyElem(
            emoji=template['emoji'],
            title=template['title']
        )

    @classmethod
    def get_taxonomy_elem(cls, key: str) -> TaxonomyElem:
        """
        –ö–æ–ø–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç–∞–∫—Å–æ–Ω–æ–º–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        return cls.TAXONOMY_TEMPLATES[key].copy()

    def __init__(self, html_page: str, url: str):
        self.rel_link = url.removeprefix(const.BASE_URL % '')
        self._tree = LexborHTMLParser(html_page)
        self._page_tag = self._tree.css_first('main > div')

    @functools.cached_property
    def header(self) -> str:
        """
        –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ü–∏—Ç–∞—Ç–∞–º–∏.
        """
        return utils.optimize_text(
            self._tree.css_first('h1').text()
        )

    @functools.cached_property
    def common_taxonomy_elem(self) -> TaxonomyElem | None:
        """
        –û–±—â–∏–π –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —ç–ª–µ–º–µ–Ω—Ç —Ç–∞–∫—Å–æ–Ω–æ–º–∏–∏, —Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–π—Å—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        –ù—É–∂–µ–Ω –ø–æ —Ç–æ–π –ø—Ä–∏—á–∏–Ω–µ, —á—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –∫ –ø—Ä–∏–º–µ—Ä—É, —Ü–∏—Ç–∞—Ç—ã –∏–∑ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∞–∫—Å–æ–Ω–æ–º–∏–∏
        —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —ç—Ç–æ—Ç —Ñ–∏–ª—å–º –±—É–¥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ.
        –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∂–µ –≤—ã—á–ª–µ–Ω–µ–Ω–∏—è –µ–¥–∏–Ω–∏—á–Ω—ã—Ö —Ü–∏—Ç–∞—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ–≥–æ –Ω—É–∂–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏ –¥–æ–±–∞–≤–ª—è—Ç—å
        –∫ —Ü–∏—Ç–∞—Ç–∞–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.
        """
        common_taxonomy_elem = None
        if self._tree.css_matches('div#breadcrumbs') and self.rel_link:
            for key in QuotePage.TAXONOMY_TEMPLATES:
                if self.rel_link.startswith(key):
                    common_taxonomy_elem = self.get_taxonomy_elem(key)
                    if key == 'music' and '/' in self.rel_link.removeprefix(key) \
                            and ' ‚Äî ' in self.header:
                        common_taxonomy_elem = TaxonomyElem('üéµ', '–ü–µ—Å–Ω—è')
                        taxonomy_elem_content_title = self.header.rsplit(' ‚Äî ', 1)[1]
                    else:
                        taxonomy_elem_content_title = self.header.rsplit(' ‚Äî ', 1)[0]
                    common_taxonomy_elem.add_content(taxonomy_elem_content_title, const.BASE_URL % self.rel_link)
        return common_taxonomy_elem

    @functools.cached_property
    def quotes(self) -> list[Quote]:
        """
        –°–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
        """
        no_results = self._page_tag.css_first('h2')
        if no_results and no_results.text() == '–í–∞—à –ø–æ–∏—Å–∫ –Ω–µ –ø—Ä–∏–Ω–µ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤':
            return []
        return [
            Quote(
                article_tag=article_tag,
                common_taxonomy_elem=self.common_taxonomy_elem
            ) for article_tag in self._page_tag.css('article')
        ]

    @functools.cached_property
    def non_quote_search_results(self) -> dict[str, list[dict[str, str]]]:
        """
        –°–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞, —è–≤–ª—è—é—â–∏—Ö—Å—è –Ω–µ —Ü–∏—Ç–∞—Ç–∞–º–∏, –∞ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ü–∏—Ç–∞—Ç, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö
        —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–ø—Ä–æ—Å–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´–ª—é–±–æ–≤—å¬ª: –∞–≤—Ç–æ—Ä—ã —Å –∏–º–µ–Ω–µ–º –õ—é–±–æ–≤—å,
        –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è, –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∫–æ—Ç–æ—Ä—ã—Ö —Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç —Å–ª–æ–≤–æ ¬´–ª—é–±–æ–≤—å¬ª –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.
        """
        groups = {}
        for group in self._page_tag.css('div.search__results > div.search__results__group'):
            content = [
                {'text': utils.optimize_text(link_tag.text()),
                 'url': link_tag.attributes['href']}
                for link_tag in group.css('a')
            ]
            group_title = utils.optimize_text(
                group.css_first('div.search__results__group__title').text()
            )
            groups[group_title] = content
        return groups

    @property
    def pagination(self) -> list[int]:
        """
        –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
        """
        pages = []
        pagination_tag = self._page_tag.css_first('div.pagination ul.pager-regular')
        if pagination_tag:
            for page in pagination_tag.css('a'):
                if page_text := page.text():
                    pages.append(int(page_text))
        return pages
