import typing
import enum
import copy
import functools

from selectolax.lexbor import LexborNode
from pyrogram.types import InputMediaPhoto

from src import utils
from src.entities.taxonomy_elem import TaxonomyElem


class QuoteTypes(enum.Enum):
    """
    –¢–∏–ø—ã —Ü–∏—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ—Å—è –≤ —Å—Å—ã–ª–∫–∞—Ö –Ω–∞ —Ü–∏—Ç–∞—Ç—ã.
    Examples:
        ``quote``: –æ–±—ã—á–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ ‚Äî https://citaty.info/quote/35045

        ``po``: –ø–æ—Å–ª–æ–≤–∏—Ü–∞ / –ø–æ–≥–æ–≤–æ—Ä–∫–∞ ‚Äî https://citaty.info/po/247673
        (–ø–æ–¥—Ö–æ–¥—è—Ç —Ç–∞–∫–∂–µ —Ü–∏—Ç–∞—Ç—ã –≤–∏–¥–∞ https://citaty.info/proverb/110707, –µ—Å–ª–∏ –≤–º–µ—Å—Ç–æ ``proverb`` –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ``po``)

        ``pritcha``: –ø—Ä–∏—Ç—á–∞ ‚Äî https://citaty.info/pritcha/121736
    """
    quote = 0
    po = 1
    pritcha = 2


class BaseQuote:
    TAXONOMY_TEMPLATES = {
        '–ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã': TaxonomyElem('¬©Ô∏è', '–ê–≤—Ç–æ—Ä'),
        '–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω': TaxonomyElem('¬©Ô∏è', '–ê–≤—Ç–æ—Ä').add_content('–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'),
        '–¶–∏—Ç–∏—Ä—É–µ–º—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂': TaxonomyElem('üí¨', '–¶–∏—Ç–∏—Ä—É–µ–º—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏'),
        '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å': TaxonomyElem('üé§', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏'),
        '–¶–∏—Ç–∞—Ç–∞ –∏–∑ –∫–Ω–∏–≥–∏': TaxonomyElem('üìñ', '–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ'),
        '–¶–∏—Ç–∞—Ç–∞ –∏–∑ —Ñ–∏–ª—å–º–∞': TaxonomyElem('üé¨', '–§–∏–ª—å–º'),
        '–¶–∏—Ç–∞—Ç–∞ –∏–∑ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞': TaxonomyElem('üß∏', '–ú—É–ª—å—Ç—Ñ–∏–ª—å–º'),
        '–¶–∏—Ç–∞—Ç–∞ –∏–∑ —Å–µ—Ä–∏–∞–ª–∞': TaxonomyElem('üçø', '–°–µ—Ä–∏–∞–ª'),
        '–¶–∏—Ç–∞—Ç–∞ –∏–∑ —Ç–µ–ª–µ—à–æ—É': TaxonomyElem('üì∫', '–¢–µ–ª–µ—à–æ—É'),
        '–¶–∏—Ç–∞—Ç–∞ –∏–∑ —Å–ø–µ–∫—Ç–∞–∫–ª—è': TaxonomyElem('üé≠', '–°–ø–µ–∫—Ç–∞–∫–ª—å'),
        '–¶–∏—Ç–∞—Ç–∞ –∏–∑ –∏–≥—Ä—ã': TaxonomyElem('üéÆ', '–ò–≥—Ä–∞'),
        '–¶–∏—Ç–∞—Ç–∞ –∏–∑ –∫–æ–º–∏–∫—Å–∞': TaxonomyElem('ü¶∏üèª\u200d‚ôÇÔ∏è', '–ö–æ–º–∏–∫—Å'),
        '–¶–∏—Ç–∞—Ç–∞ –∏–∑ –∞–Ω–∏–º–µ': TaxonomyElem('ü•∑üèª', '–ê–Ω–∏–º–µ'),
        '–ü–µ—Å–Ω—è': TaxonomyElem('üéµ', '–ü–µ—Å–Ω—è'),
        '–°–∞–º–∏–∑–¥–∞—Ç': TaxonomyElem('‚úçüèª', '–°–∞–º–∏–∑–¥–∞—Ç'),
        '–ü—Ä–∏—Ç—á–∞': TaxonomyElem('‚òØ', '–ü—Ä–∏—Ç—á–∞'),
        '–§–æ–ª—å–∫–ª–æ—Ä': TaxonomyElem('üìú', '–§–æ–ª—å–∫–ª–æ—Ä'),
        '–≠–ø–∏–∑–æ–¥': TaxonomyElem('üìÄ', '–≠–ø–∏–∑–æ–¥'),
        '–ö–í–ù': TaxonomyElem('üòÇ', '–ö–æ–º–∞–Ω–¥–∞ –ö–í–ù')
    }

    @classmethod
    def get_taxonomy_elem(cls, key: str) -> TaxonomyElem:
        return copy.deepcopy(cls.TAXONOMY_TEMPLATES[key])

    def __init__(self, article_tag: LexborNode):
        self._quote_with_meta_tag = article_tag
        self._quote_tag = article_tag.css_first('div.node__content')

    @functools.cached_property
    def id(self) -> str:
        """
        ID —Ü–∏—Ç–∞—Ç—ã. –ù—É–∂–µ–Ω –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏.
        Examples:
            ``35045``: https://citaty.info/quote/35045
        """
        return self._quote_with_meta_tag.id.removeprefix('node-')

    @functools.cached_property
    def type(self) -> QuoteTypes:
        """
        –¢–∏–ø —Ü–∏—Ç–∞—Ç—ã. –ù—É–∂–µ–Ω –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏.
        """
        quote_class = self._quote_with_meta_tag.attributes['class']
        if 'node-po' in quote_class:
            return QuoteTypes.po
        elif 'node-pritcha' in quote_class:
            return QuoteTypes.pritcha
        else:
            return QuoteTypes.quote

    @functools.cached_property
    def rel_link(self) -> str:
        """
        –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ü–∏—Ç–∞—Ç—É. –ù—É–∂–Ω–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
        –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –≤ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º.
        Examples:
            ``quote/35045``: https://citaty.info/quote/35045
        """
        return f'{self.type.name}/{self.id}'

    @functools.cached_property
    def images(self) -> typing.List[InputMediaPhoto] | None:
        images = []
        for img_tag in self._quote_tag.css('img'):
            images.append(InputMediaPhoto(img_tag.attributes['src']))
        if images:
            return images

    @functools.cached_property
    def explanation(self) -> str | None:
        explanation_tag = self._quote_tag.css_first('div.field-name-field-description div.field-item')
        if explanation_tag is not None:
            explanation_text = utils.optimize_text(explanation_tag.text())
            return explanation_text

    @functools.cached_property
    def has_original(self) -> bool:
        """
        –ò–º–µ–µ—Ç –ª–∏ —Ü–∏—Ç–∞—Ç–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.
        """
        return self._quote_tag.css_matches('div.quote__original')

    @property
    def _text(self) -> str | typing.Tuple[str, str]:
        """
        –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, —Å—Å—ã–ª–æ–∫ –∏ —Ç–µ–≥–æ–≤.
        Returns:
            *–Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç*

            *–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –ø–µ—Ä–µ–≤–æ–¥*: –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ü–∏—Ç–∞—Ç –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ —Ç–µ–∫—Å—Ç –¥–µ–ª–∏—Ç—Å—è –Ω–∞ —ç—Ç–∏ –¥–≤–µ —á–∞—Å—Ç–∏
        Raises:
            ValueError: –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–µ–∫—Å—Ç–∞
        """
        translation_tags = self._quote_tag.css('div.field-name-body')
        match translation_tags:
            case (text_tag, ):
                return text_tag.text().strip()
            case original_tag, translation_tag:
                return original_tag.text().strip(), translation_tag.text().strip()
            case _:
                raise ValueError('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã')

    @property
    def _pritcha_header(self) -> str:
        return self._quote_tag.css_first('h2').text()

    @property
    def _series(self) -> TaxonomyElem | None:
        """
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–∏–∞–ª–æ–≤ (—Å–µ–∑–æ–Ω, —Å–µ—Ä–∏—è, —ç–ø–∏–∑–æ–¥ –∏ —Ç. –¥.)
        """
        if self.type is QuoteTypes.quote:
            series_metadata_tag = self._quote_tag.css_first('div.node__series')
            if series_metadata_tag is not None:
                taxonomy_elem = self.get_taxonomy_elem('–≠–ø–∏–∑–æ–¥')
                for series_tag in series_metadata_tag.css('div.field-item'):
                    if link_tag := series_tag.css_first('a'):
                        taxonomy_elem.add_content(link_tag.text(), link_tag.attributes['href'])
                    else:
                        taxonomy_elem.add_content(series_tag.text())
                return taxonomy_elem

    @property
    def _taxonomy(self) -> typing.Generator[TaxonomyElem, None, None]:
        if self.type is QuoteTypes.pritcha:
            taxonomy_elem = self.get_taxonomy_elem('–ü—Ä–∏—Ç—á–∞')
            yield taxonomy_elem.add_content(self._pritcha_header)
        else:
            taxonomy_tags = self._quote_with_meta_tag.css('div.node__content > div.field-type-taxonomy-term-reference')
            for tag in taxonomy_tags:
                if link_tag := tag.css_first('a'):  # –ë—ã–≤–∞–µ—Ç, —á—Ç–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø—É—Å—Ç—ã–µ div'—ã –±–µ–∑ —Å—Å—ã–ª–æ–∫
                    key = link_tag.attributes.get('title')
                    if not key:
                        if '/kvn/' in link_tag.attributes['href']:
                            key = '–ö–í–ù'
                        elif link_tag.attributes['href'] == '/other':
                            key = '–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
                        else:
                            key = '–§–æ–ª—å–∫–ª–æ—Ä'
                    taxonomy_elem = self.get_taxonomy_elem(key)
                    if key != '–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω':
                        for link_tag in tag.css('a'):
                            taxonomy_elem.add_content(link_tag.text(), link_tag.attributes['href'])
                    yield taxonomy_elem
            if series := self._series:
                yield series

    @functools.cached_property
    def header(self) -> str | None:
        match self.type:
            case QuoteTypes.pritcha:
                return f'–ü—Ä–∏—Ç—á–∞ ¬´{self._quote_tag.css_first("h2").text()}¬ª'
            case QuoteTypes.po:
                for taxonomy_elem in self._taxonomy:
                    if taxonomy_elem.title == '–§–æ–ª—å–∫–ª–æ—Ä':
                        return taxonomy_elem.plain_text
            case QuoteTypes.quote:
                authors = source = characters = None
                for taxonomy_elem in self._taxonomy:
                    match taxonomy_elem.title:
                        case '–≠–ø–∏–∑–æ–¥':
                            continue
                        case '–¶–∏—Ç–∏—Ä—É–µ–º—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏':
                            characters = '–ü–µ—Ä—Å–æ–Ω–∞–∂'
                            if taxonomy_elem.count > 1:
                                characters += '–∏'
                            characters += f' {taxonomy_elem.plain_text}'
                        case '–ê–≤—Ç–æ—Ä' | '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏':
                            authors = taxonomy_elem.plain_text
                            if authors == '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω':
                                authors = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'
                        case '–ü–µ—Å–Ω—è':
                            source = taxonomy_elem.plain_text
                        case _:
                            source = f'{taxonomy_elem.title.lower()} ¬´{taxonomy_elem.plain_text}¬ª'
                if authors and source:
                    return f'{authors} ‚Äî {source}'
                elif source:
                    return f'{source[0].upper()}{source[1:]}'
                elif authors:
                    return authors
                elif characters:
                    return characters
                else:
                    return None

    @property
    def _topics(self) -> typing.Generator[dict, None, None]:
        topics = []
        topic_tag = self._quote_tag.css_first(f'div.node__topics')
        if topic_tag:
            topics.extend(topic_tag.css('a'))                        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–≥–∏, –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–æ–¥ —Ü–∏—Ç–∞—Ç–æ–π
        topics.extend(self._quote_tag.css('div.field-name-body a'))  # –¢–µ–≥–∏, –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã
        for num, topic in enumerate(topics):
            topic = {'text': topic.text().lower()
                                         .replace(' ', '_')
                                         .replace(',_', ' #'),
                     'url': topic.attributes['href']}  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–≥–∏ –≤ —É–¥–æ–±–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä–∏
            if topic['url'] not in topics:             # –∏ –æ—Ç—Å–µ–∏–≤–∞–µ–º, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ —Å—Å—ã–ª–∫–∏ —É–∂–µ –µ—Å—Ç—å
                yield topic
            topics[num] = topic['url']                 # (–∏–º–µ–Ω–Ω–æ —Å—Å—ã–ª–∫–∏, –∞ –Ω–µ —Ç–µ–∫—Å—Ç, —Ç. –∫. –æ–Ω –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è)
